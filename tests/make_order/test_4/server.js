const express = require('express');
const https = require('https');
const socketIo = require('socket.io');
const bodyParser = require('body-parser');
const session = require('express-session');
const sharedSession = require('express-socket.io-session'); // Import express-socket.io-session
const bcrypt = require('bcrypt');
const fs = require('fs');
const path = require('path');

const app = express();

// Read SSL certificate files
const privateKey = fs.readFileSync('./key.pem', 'utf8');
const certificate = fs.readFileSync('./cert.pem', 'utf8');
const credentials = { key: privateKey, cert: certificate };


const server = https.createServer(credentials, app);
const io = socketIo(server);


app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Session configuration
const sessionMiddleware = session({
    secret: 'my_super_secret_key_12345', // Replace with your secret key
    resave: false,
    saveUninitialized: true,
    cookie: { secure: true } // Set to true in production with HTTPS
});

app.use(sessionMiddleware);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

// Dummy user for login with hashed password
const user = {
    username: 'Hackifucan',
    passwordHash: '$2b$10$lAKfrBm9psgwrnBXqeckdu08Y.uApUGH2GZ6TODfUYYh/RE/svB.S' // Updated hash
};

// Login endpoint
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    if (username === user.username && await bcrypt.compare(password, user.passwordHash)) {
        req.session.user = username; // Store username in session
        res.send({ success: true });
    } else {
        res.status(401).send({ success: false, message: 'Invalid credentials' });
    }
});

// Function to read the temperature file
const readTemperatureFile = (callback) => {
    fs.readFile('/tmp/ramfss/temperature', 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading file:', err);
            callback(err, null);
        } else {
            callback(null, data);
        }
    });
};

// Socket.IO session middleware
io.use(sharedSession(sessionMiddleware, {
    autoSave: true
}));

// Real-time data endpoint
io.on('connection', (socket) => {
    if (!socket.handshake.session.user) {
        socket.emit('error', { message: 'Unauthorized' });
        socket.disconnect();
        return;
    }

    const sendData = () => {
        readTemperatureFile((err, data) => {
            if (err) return;
            socket.emit('data', data);
        });
    };

    // Send data every 2 seconds
    const intervalId = setInterval(sendData, 1000);

    socket.on('disconnect', () => {
        clearInterval(intervalId);
    });
});

const PORT = process.env.PORT || 3000 + parseInt(process.argv[2]);
server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

"use strict";
import "/socket.io/socket.io.js";
document.addEventListener("DOMContentLoaded", () => {
  const loginForm = document.getElementById("login-form");
  const loginError = document.getElementById("login-error");

  const container = document.getElementById("container");
  const dataContainer = document.getElementById("data");
  const loginContainer = document.getElementById("login-container");
  const padlockImage = document.getElementById("left");

  const temperatureElement = document.getElementById("temperature");
  const humidityElement = document.getElementById("humidity");

  const logoutButton = document.getElementById("logout");
  let socket;

  loginForm.onsubmit = async (event) => {
    event.preventDefault();
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    setTimeout(() => {
      loginError.textContent = "";
    }, 5000);

    try {
      const response = await fetch("/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username, password }),
      });

      const result = await response.json();

      if (result.success) {
        container.style.padding = "2rem 6rem";
        padlockImage.style.display = "none";
        loginContainer.style.display = "none";
        dataContainer.style.display = "block";

        initializeSocket();
      } else {
        loginError.textContent = "Invalid credentials";
      }
    } catch (error) {
      console.log(error);
      loginError.textContent = "An error occurred. Please try again.";
    }
  };

  logoutButton.onclick = () => {
    dataContainer.style.display = "none";
    loginContainer.style.display = "block";
    document.getElementById("username").value = "";
    document.getElementById("password").value = "";
    container.style.padding = "0px";
    padlockImage.style.display = "flex";
    if (socket) {
      socket.disconnect();
    }
  };

  function initializeSocket() {
    socket = io({ secure: true });

    // Listen for 'data' events from the server
    socket.on("data", (data) => {
      const [humidity, temperature] = data.trim().split(" ");
      humidityElement.textContent = `${humidity}`;
      temperatureElement.textContent = `${temperature}Â°C`;
    });

    // Handle socket disconnection
    socket.on("disconnect", () => {
      temperatureElement.textContent = "Disconnected from server";
      humidityElement.textContent = "";
    });

    // Handle unauthorized access
    socket.on("error", (error) => {
      if (error.message === "Unauthorized") {
        alert("You are not authorized to view this data. Please log in.");
        dataContainer.style.display = "none";
        loginForm.style.display = "block";
        socket.disconnect();
      }
    });
  }
});

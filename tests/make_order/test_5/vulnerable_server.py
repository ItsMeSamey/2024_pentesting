from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse
import sqlite3
import os

conn = sqlite3.connect('vulnerable.db')

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'''
            <html>
            <head>
                <title>Login</title>
                <style>
                    body { font-family: Arial, sans-serif; }
                    .container { width: 300px; margin: 100px auto; padding: 20px; border: 1px solid #ccc; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }
                    .container h2 { text-align: center; }
                    .container input { width: 100%; padding: 10px; margin: 5px 0; }
                    .container input[type="submit"] { background-color: #4CAF50; color: white; border: none; cursor: pointer; }
                    .container input[type="submit"]:hover { background-color: #45a049; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Login</h2>
                    <form action="/login" method="post">
                        Username: <input type="text" name="username" placeholder = "firstname_lastname"><br>
                        Password: <input type="password" name="password"><br>
                        <input type="submit" value="Login">
                    </form>
                </div>
            </body>
            </html>
            ''')
        elif self.path.startswith('/images/'):
            self.serve_image()
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        global conn
        if self.path == '/login':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            params = urllib.parse.parse_qs(post_data.decode('utf-8'))
            username = params['username'][0]
            password = params['password'][0]

            cursor = conn.cursor()
            
            # Vulnerable to SQL Injection
            query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
            print(f"Executing query: {query}")  # Debugging information
            cursor.execute(query)
            results = cursor.fetchone()
            
            if results:
                # Fetch employee information
                query = f"SELECT * FROM employees WHERE username = '{username}'"
                print(f"Executing query: {query}")  # Debugging information
                cursor.execute(query)
                employee = cursor.fetchone()

                if employee:
                    self.send_response(200)
                    self.send_header('Content-type', 'text/html')
                    self.end_headers()
                    self.wfile.write(f'''
                    <html>
                    <head>
                        <title>Employee Info</title>
                        <style>
                            body {{ font-family: Arial, sans-serif; }}
                            .container {{ width: 400px; margin: 100px auto; padding: 20px; border: 1px solid #ccc; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }}
                            .container h1 {{ text-align: center; }}
                            .container img {{ display: block; margin: 0 auto; }}
                            .container p {{ text-align: center; }}
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <h1>Employee Info</h1>
                            <p>Name: {employee[2]}</p>
                            <p>Surname: {employee[3]}</p>
                            <img src="D:/VS/Web-Dev/Frontend/images/image.pnghttps://in.images.search.yahoo.com/search/images;_ylt=AwrKB1V8.JRmtsAMIAm7HAx.;_ylu=Y29sbwNzZzMEcG9zAzEEdnRpZAMEc2VjA3BpdnM-?p=image&fr2=piv-web&type=E211IN885G0&fr=mcafee#id=2&iurl=https%3A%2F%2Fphotutorial.com%2Fwp-content%2Fuploads%2F2023%2F04%2FFeatured-image-AI-image-generators-by-Midjourney.png&action=click" alt="Employee Photo" width="150" height="150"><br>
                            <p>EmployeeID: {employee[5]}</p>
                        </div>
                    </body>
                    </html>
                    '''.encode('utf-8'))
                else:
                    self.send_response(200)
                    self.send_header('Content-type', 'text/html')
                    self.end_headers()
                    self.wfile.write(b"No employee found")
            else:
                self.send_response(401)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b'''
                <html>
                <head>
                    <title>Login Failed</title>
                    <style>
                        body { font-family: Arial, sans-serif; }
                        .container { width: 300px; margin: 100px auto; padding: 20px; border: 1px solid #f44336; border-radius: 10px; box-shadow: 0px 0px 10px rgba(0,0,0,0.1); }
                        .container h2 { text-align: center; color: #f44336; }
                        .container p { text-align: center; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h2>Login Failed</h2>
                        <p>Invalid username or password.</p>
                        <a href="/">Try Again</a>
                    </div>
                </body>
                </html>
                ''')

    def serve_image(self):
        image_path = self.path.strip('/')
        if os.path.exists(image_path):
            self.send_response(200)
            self.send_header('Content-type', 'image/jpeg')
            self.end_headers()
            with open(image_path, 'rb') as file:
                self.wfile.write(file.read())
        else:
            self.send_response(404)
            self.end_headers()

def run(server_class=HTTPServer, handler_class=RequestHandler, port=8798):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {port}...')
    httpd.serve_forever()

run()

